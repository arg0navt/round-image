export default class RoundImage {
  static init(...arg) {
    return new this(...arg).getDataImage();
  }

  constructor(img, callback) {
    this.info = {
      img,
      callback
    }
  }

  getDataImage = () => {
    const cvs = document.createElement('canvas');
    const ctx = cvs.getContext("2d");
    let theImgData;
    this.info.img.onload = (e) => {
      cvs.width = 200;
      cvs.height = 200;
      ctx.drawImage(this.info.img, 0 ,0);
      this.info.bitmap = ctx.getImageData(0, 0, cvs.width, cvs.height);
      this.getMainColorRgba();
    };
  };

  getMainColorRgba = () => {
    const {data} = this.info.bitmap;
    const result = [];
    if(data) {
      for (let i=0; i<data.length; i+=4) {
        const findColor = result.find((item) => item.color === `${data[i]},${data[i + 1]},${data[i + 2]}`);
        if (findColor) {
          findColor.count = findColor.count + 1;
        } else result.push({color: `${data[i]},${data[i + 1]},${data[i + 2]}`, count: 1});
      }
    }
    result.sort((a, b) => b.count - a.count);
    console.log(result);
    this.info.mainColor = result[1].color;
    this.info.callback(this.info.mainColor);
  };

  getArrayBuffer = () => this.info.buffer = new ArrayBuffer(this.info.base64.length * 2)
}